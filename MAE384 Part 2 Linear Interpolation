%% Part 2 Interpolation
h_fine = 1;                
h_coarse = 2;             
T = 100;                   
N = 1000;                 
t_fine = 0:h_fine:T;       
t_coarse = 0:h_coarse:T;   
t_odd = 1:2:T;             

% Initial Conditions
S0 = 990;                  
I0 = 10;                   
R0 = 0;                    

% seasonal influenza
beta = 0.3;                
gamma = 0.1;               

% Function 
function [S, I, R] = simulate_SIR(t, h, S0, I0, R0, beta, gamma, N)
    S = zeros(1, length(t));
    I = zeros(1, length(t));
    R = zeros(1, length(t));
    S(1) = S0; I(1) = I0; R(1) = R0;

    for i = 1:(length(t) - 1)
        S_i = S(i); I_i = I(i); R_i = R(i);

        % Derivatives
        f1_S = @(S, I) -beta / N * S * I;
        f1_I = @(S, I) beta / N * S * I - gamma * I;
        f1_R = @(I) gamma * I;

        % RK4 steps
        k1_S = h * f1_S(S_i, I_i);
        k1_I = h * f1_I(S_i, I_i);
        k1_R = h * f1_R(I_i);

        k2_S = h * f1_S(S_i + k1_S / 2, I_i + k1_I / 2);
        k2_I = h * f1_I(S_i + k1_S / 2, I_i + k1_I / 2);
        k2_R = h * f1_R(I_i + k1_I / 2);

        k3_S = h * f1_S(S_i + k2_S / 2, I_i + k2_I / 2);
        k3_I = h * f1_I(S_i + k2_S / 2, I_i + k2_I / 2);
        k3_R = h * f1_R(I_i + k2_I / 2);

        k4_S = h * f1_S(S_i + k3_S, I_i + k3_I);
        k4_I = h * f1_I(S_i + k3_S, I_i + k3_I);
        k4_R = h * f1_R(I_i + k3_I);

        % Updated values
        S(i + 1) = S_i + (k1_S + 2 * k2_S + 2 * k3_S + k4_S) / 6;
        I(i + 1) = I_i + (k1_I + 2 * k2_I + 2 * k3_I + k4_I) / 6;
        R(i + 1) = R_i + (k1_R + 2 * k2_R + 2 * k3_R + k4_R) / 6;
    end
end


[S_fine, I_fine, R_fine] = simulate_SIR(t_fine, h_fine, S0, I0, R0, beta, gamma, N);
[S_coarse, I_coarse, R_coarse] = simulate_SIR(t_coarse, h_coarse, S0, I0, R0, beta, gamma, N);

% Linear Interpolation
S_linear_interp = interp1(t_coarse, S_coarse, t_odd, 'linear');
I_linear_interp = interp1(t_coarse, I_coarse, t_odd, 'linear');
R_linear_interp = interp1(t_coarse, R_coarse, t_odd, 'linear');

% Quadratic Interpolation
function indices = nearest_indices(array, target, num_points)
    [~, sorted_indices] = sort(abs(array - target));
    indices = sorted_indices(1:num_points);
    indices = sort(indices); 
end

function values = nearest_points(array, target, num_points)
    indices = nearest_indices(array, target, num_points);
    values = array(indices);
end

function V_interp = quadratic_interp(t_points, V_points, t_interp)
    n = length(t_points);
    V_interp = 0;
    for i = 1:n
        L = 1;
        for j = 1:n
            if i ~= j
                L = L .* (t_interp - t_points(j)) / (t_points(i) - t_points(j));
            end
        end
        V_interp = V_interp + V_points(i) * L;
    end
end

S_quadratic_interp = arrayfun(@(t) ...
    quadratic_interp(nearest_points(t_coarse, t, 3), ...
                     S_coarse(nearest_indices(t_coarse, t, 3)), t), ...
    t_odd);

I_quadratic_interp = arrayfun(@(t) ...
    quadratic_interp(nearest_points(t_coarse, t, 3), ...
                     I_coarse(nearest_indices(t_coarse, t, 3)), t), ...
    t_odd);

R_quadratic_interp = arrayfun(@(t) ...
    quadratic_interp(nearest_points(t_coarse, t, 3), ...
                     R_coarse(nearest_indices(t_coarse, t, 3)), t), ...
    t_odd);

% True Values 
odd_indices = t_odd / h_fine + 1;
S_true = S_fine(odd_indices);
I_true = I_fine(odd_indices);
R_true = R_fine(odd_indices);

% L2 Errors
EL2_S_linear = sqrt(sum((S_linear_interp - S_true).^2) / length(t_odd));
EL2_I_linear = sqrt(sum((I_linear_interp - I_true).^2) / length(t_odd));
EL2_R_linear = sqrt(sum((R_linear_interp - R_true).^2) / length(t_odd));

EL2_S_quad = sqrt(sum((S_quadratic_interp - S_true).^2) / length(t_odd));
EL2_I_quad = sqrt(sum((I_quadratic_interp - I_true).^2) / length(t_odd));
EL2_R_quad = sqrt(sum((R_quadratic_interp - R_true).^2) / length(t_odd));

disp('L2 Errors for Interpolation Methods:');
errors = table([EL2_S_linear; EL2_S_quad], ...
               [EL2_I_linear; EL2_I_quad], ...
               [EL2_R_linear; EL2_R_quad], ...
               'VariableNames', {'Susceptible', 'Infected', 'Recovered'}, ...
               'RowNames', {'Linear', 'Quadratic'});
disp(errors);

% results
disp('Interpolation Comparison:');
if sum(errors{1, :}) < sum(errors{2, :})
    disp('Linear interpolation has smaller errors overall.');
else
    disp('Quadratic interpolation has smaller errors overall.');
end
